// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StateTransitions extends pulumi.CustomResource {
    /**
     * Get an existing StateTransitions resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StateTransitionsState, opts?: pulumi.CustomResourceOptions): StateTransitions {
        return new StateTransitions(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commercetools:index/stateTransitions:StateTransitions';

    /**
     * Returns true if the given object is an instance of StateTransitions.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StateTransitions {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StateTransitions.__pulumiType;
    }

    /**
     * ID of the state to transition from
     */
    public readonly from!: pulumi.Output<string>;
    /**
     * Transitions are a way to describe possible transformations of the current state to other states of the same type (for
     * example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
     * referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
     * a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
     * performing a transitionState update action, any other state of the same type can be transitioned to
     */
    public readonly tos!: pulumi.Output<string[]>;

    /**
     * Create a StateTransitions resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateTransitionsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StateTransitionsArgs | StateTransitionsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StateTransitionsState | undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
        } else {
            const args = argsOrState as StateTransitionsArgs | undefined;
            if ((!args || args.from === undefined) && !opts.urn) {
                throw new Error("Missing required property 'from'");
            }
            if ((!args || args.tos === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tos'");
            }
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StateTransitions.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StateTransitions resources.
 */
export interface StateTransitionsState {
    /**
     * ID of the state to transition from
     */
    from?: pulumi.Input<string>;
    /**
     * Transitions are a way to describe possible transformations of the current state to other states of the same type (for
     * example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
     * referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
     * a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
     * performing a transitionState update action, any other state of the same type can be transitioned to
     */
    tos?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a StateTransitions resource.
 */
export interface StateTransitionsArgs {
    /**
     * ID of the state to transition from
     */
    from: pulumi.Input<string>;
    /**
     * Transitions are a way to describe possible transformations of the current state to other states of the same type (for
     * example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
     * referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
     * a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
     * performing a transitionState update action, any other state of the same type can be transitioned to
     */
    tos: pulumi.Input<pulumi.Input<string>[]>;
}
