// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApiClientArgs, ApiClientState } from "./apiClient";
export type ApiClient = import("./apiClient").ApiClient;
export const ApiClient: typeof import("./apiClient").ApiClient = null as any;
utilities.lazyLoad(exports, ["ApiClient"], () => require("./apiClient"));

export { ApiExtensionArgs, ApiExtensionState } from "./apiExtension";
export type ApiExtension = import("./apiExtension").ApiExtension;
export const ApiExtension: typeof import("./apiExtension").ApiExtension = null as any;
utilities.lazyLoad(exports, ["ApiExtension"], () => require("./apiExtension"));

export { CartDiscountArgs, CartDiscountState } from "./cartDiscount";
export type CartDiscount = import("./cartDiscount").CartDiscount;
export const CartDiscount: typeof import("./cartDiscount").CartDiscount = null as any;
utilities.lazyLoad(exports, ["CartDiscount"], () => require("./cartDiscount"));

export { CategoryArgs, CategoryState } from "./category";
export type Category = import("./category").Category;
export const Category: typeof import("./category").Category = null as any;
utilities.lazyLoad(exports, ["Category"], () => require("./category"));

export { ChannelArgs, ChannelState } from "./channel";
export type Channel = import("./channel").Channel;
export const Channel: typeof import("./channel").Channel = null as any;
utilities.lazyLoad(exports, ["Channel"], () => require("./channel"));

export { CustomObjectArgs, CustomObjectState } from "./customObject";
export type CustomObject = import("./customObject").CustomObject;
export const CustomObject: typeof import("./customObject").CustomObject = null as any;
utilities.lazyLoad(exports, ["CustomObject"], () => require("./customObject"));

export { CustomerGroupArgs, CustomerGroupState } from "./customerGroup";
export type CustomerGroup = import("./customerGroup").CustomerGroup;
export const CustomerGroup: typeof import("./customerGroup").CustomerGroup = null as any;
utilities.lazyLoad(exports, ["CustomerGroup"], () => require("./customerGroup"));

export { DiscountCodeArgs, DiscountCodeState } from "./discountCode";
export type DiscountCode = import("./discountCode").DiscountCode;
export const DiscountCode: typeof import("./discountCode").DiscountCode = null as any;
utilities.lazyLoad(exports, ["DiscountCode"], () => require("./discountCode"));

export { GetTypeArgs, GetTypeResult, GetTypeOutputArgs } from "./getType";
export const getType: typeof import("./getType").getType = null as any;
export const getTypeOutput: typeof import("./getType").getTypeOutput = null as any;
utilities.lazyLoad(exports, ["getType","getTypeOutput"], () => require("./getType"));

export { ProductDiscountArgs, ProductDiscountState } from "./productDiscount";
export type ProductDiscount = import("./productDiscount").ProductDiscount;
export const ProductDiscount: typeof import("./productDiscount").ProductDiscount = null as any;
utilities.lazyLoad(exports, ["ProductDiscount"], () => require("./productDiscount"));

export { ProductTypeArgs, ProductTypeState } from "./productType";
export type ProductType = import("./productType").ProductType;
export const ProductType: typeof import("./productType").ProductType = null as any;
utilities.lazyLoad(exports, ["ProductType"], () => require("./productType"));

export { ProjectSettingsArgs, ProjectSettingsState } from "./projectSettings";
export type ProjectSettings = import("./projectSettings").ProjectSettings;
export const ProjectSettings: typeof import("./projectSettings").ProjectSettings = null as any;
utilities.lazyLoad(exports, ["ProjectSettings"], () => require("./projectSettings"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ShippingMethodArgs, ShippingMethodState } from "./shippingMethod";
export type ShippingMethod = import("./shippingMethod").ShippingMethod;
export const ShippingMethod: typeof import("./shippingMethod").ShippingMethod = null as any;
utilities.lazyLoad(exports, ["ShippingMethod"], () => require("./shippingMethod"));

export { ShippingZoneArgs, ShippingZoneState } from "./shippingZone";
export type ShippingZone = import("./shippingZone").ShippingZone;
export const ShippingZone: typeof import("./shippingZone").ShippingZone = null as any;
utilities.lazyLoad(exports, ["ShippingZone"], () => require("./shippingZone"));

export { ShippingZoneRateArgs, ShippingZoneRateState } from "./shippingZoneRate";
export type ShippingZoneRate = import("./shippingZoneRate").ShippingZoneRate;
export const ShippingZoneRate: typeof import("./shippingZoneRate").ShippingZoneRate = null as any;
utilities.lazyLoad(exports, ["ShippingZoneRate"], () => require("./shippingZoneRate"));

export { StateArgs, StateState } from "./state";
export type State = import("./state").State;
export const State: typeof import("./state").State = null as any;
utilities.lazyLoad(exports, ["State"], () => require("./state"));

export { StateTransitionsArgs, StateTransitionsState } from "./stateTransitions";
export type StateTransitions = import("./stateTransitions").StateTransitions;
export const StateTransitions: typeof import("./stateTransitions").StateTransitions = null as any;
utilities.lazyLoad(exports, ["StateTransitions"], () => require("./stateTransitions"));

export { StoreArgs, StoreState } from "./store";
export type Store = import("./store").Store;
export const Store: typeof import("./store").Store = null as any;
utilities.lazyLoad(exports, ["Store"], () => require("./store"));

export { SubscriptionArgs, SubscriptionState } from "./subscription";
export type Subscription = import("./subscription").Subscription;
export const Subscription: typeof import("./subscription").Subscription = null as any;
utilities.lazyLoad(exports, ["Subscription"], () => require("./subscription"));

export { TaxCategoryArgs, TaxCategoryState } from "./taxCategory";
export type TaxCategory = import("./taxCategory").TaxCategory;
export const TaxCategory: typeof import("./taxCategory").TaxCategory = null as any;
utilities.lazyLoad(exports, ["TaxCategory"], () => require("./taxCategory"));

export { TaxCategoryRateArgs, TaxCategoryRateState } from "./taxCategoryRate";
export type TaxCategoryRate = import("./taxCategoryRate").TaxCategoryRate;
export const TaxCategoryRate: typeof import("./taxCategoryRate").TaxCategoryRate = null as any;
utilities.lazyLoad(exports, ["TaxCategoryRate"], () => require("./taxCategoryRate"));

export { TypeArgs, TypeState } from "./type";
export type Type = import("./type").Type;
export const Type: typeof import("./type").Type = null as any;
utilities.lazyLoad(exports, ["Type"], () => require("./type"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "commercetools:index/apiClient:ApiClient":
                return new ApiClient(name, <any>undefined, { urn })
            case "commercetools:index/apiExtension:ApiExtension":
                return new ApiExtension(name, <any>undefined, { urn })
            case "commercetools:index/cartDiscount:CartDiscount":
                return new CartDiscount(name, <any>undefined, { urn })
            case "commercetools:index/category:Category":
                return new Category(name, <any>undefined, { urn })
            case "commercetools:index/channel:Channel":
                return new Channel(name, <any>undefined, { urn })
            case "commercetools:index/customObject:CustomObject":
                return new CustomObject(name, <any>undefined, { urn })
            case "commercetools:index/customerGroup:CustomerGroup":
                return new CustomerGroup(name, <any>undefined, { urn })
            case "commercetools:index/discountCode:DiscountCode":
                return new DiscountCode(name, <any>undefined, { urn })
            case "commercetools:index/productDiscount:ProductDiscount":
                return new ProductDiscount(name, <any>undefined, { urn })
            case "commercetools:index/productType:ProductType":
                return new ProductType(name, <any>undefined, { urn })
            case "commercetools:index/projectSettings:ProjectSettings":
                return new ProjectSettings(name, <any>undefined, { urn })
            case "commercetools:index/shippingMethod:ShippingMethod":
                return new ShippingMethod(name, <any>undefined, { urn })
            case "commercetools:index/shippingZone:ShippingZone":
                return new ShippingZone(name, <any>undefined, { urn })
            case "commercetools:index/shippingZoneRate:ShippingZoneRate":
                return new ShippingZoneRate(name, <any>undefined, { urn })
            case "commercetools:index/state:State":
                return new State(name, <any>undefined, { urn })
            case "commercetools:index/stateTransitions:StateTransitions":
                return new StateTransitions(name, <any>undefined, { urn })
            case "commercetools:index/store:Store":
                return new Store(name, <any>undefined, { urn })
            case "commercetools:index/subscription:Subscription":
                return new Subscription(name, <any>undefined, { urn })
            case "commercetools:index/taxCategory:TaxCategory":
                return new TaxCategory(name, <any>undefined, { urn })
            case "commercetools:index/taxCategoryRate:TaxCategoryRate":
                return new TaxCategoryRate(name, <any>undefined, { urn })
            case "commercetools:index/type:Type":
                return new Type(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("commercetools", "index/apiClient", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/apiExtension", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/cartDiscount", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/category", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/channel", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/customObject", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/customerGroup", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/discountCode", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/productDiscount", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/productType", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/projectSettings", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/shippingMethod", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/shippingZone", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/shippingZoneRate", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/state", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/stateTransitions", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/store", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/subscription", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/taxCategory", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/taxCategoryRate", _module)
pulumi.runtime.registerResourceModule("commercetools", "index/type", _module)
pulumi.runtime.registerResourcePackage("commercetools", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:commercetools") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
