// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Category extends pulumi.CustomResource {
    /**
     * Get an existing Category resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CategoryState, opts?: pulumi.CustomResourceOptions): Category {
        return new Category(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commercetools:index/category:Category';

    /**
     * Returns true if the given object is an instance of Category.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Category {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Category.__pulumiType;
    }

    /**
     * Can be used to store images, icons or movies related to this category
     */
    public readonly assets!: pulumi.Output<outputs.CategoryAsset[] | undefined>;
    public readonly custom!: pulumi.Output<outputs.CategoryCustom | undefined>;
    public readonly description!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly externalId!: pulumi.Output<string | undefined>;
    /**
     * Category-specific unique identifier. Must be unique across a project
     */
    public readonly key!: pulumi.Output<string | undefined>;
    public readonly metaDescription!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly metaKeywords!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly metaTitle!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly name!: pulumi.Output<{[key: string]: any}>;
    /**
     * An attribute as base for a custom category order in one level, filled with random value when left empty
     */
    public readonly orderHint!: pulumi.Output<string | undefined>;
    /**
     * A category that is the parent of this category in the category tree
     */
    public readonly parent!: pulumi.Output<string | undefined>;
    /**
     * Human readable identifiers, needs to be unique
     */
    public readonly slug!: pulumi.Output<{[key: string]: any}>;
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Category resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CategoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CategoryArgs | CategoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CategoryState | undefined;
            resourceInputs["assets"] = state ? state.assets : undefined;
            resourceInputs["custom"] = state ? state.custom : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["externalId"] = state ? state.externalId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["metaDescription"] = state ? state.metaDescription : undefined;
            resourceInputs["metaKeywords"] = state ? state.metaKeywords : undefined;
            resourceInputs["metaTitle"] = state ? state.metaTitle : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orderHint"] = state ? state.orderHint : undefined;
            resourceInputs["parent"] = state ? state.parent : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CategoryArgs | undefined;
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["assets"] = args ? args.assets : undefined;
            resourceInputs["custom"] = args ? args.custom : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["externalId"] = args ? args.externalId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["metaDescription"] = args ? args.metaDescription : undefined;
            resourceInputs["metaKeywords"] = args ? args.metaKeywords : undefined;
            resourceInputs["metaTitle"] = args ? args.metaTitle : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orderHint"] = args ? args.orderHint : undefined;
            resourceInputs["parent"] = args ? args.parent : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Category.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Category resources.
 */
export interface CategoryState {
    /**
     * Can be used to store images, icons or movies related to this category
     */
    assets?: pulumi.Input<pulumi.Input<inputs.CategoryAsset>[]>;
    custom?: pulumi.Input<inputs.CategoryCustom>;
    description?: pulumi.Input<{[key: string]: any}>;
    externalId?: pulumi.Input<string>;
    /**
     * Category-specific unique identifier. Must be unique across a project
     */
    key?: pulumi.Input<string>;
    metaDescription?: pulumi.Input<{[key: string]: any}>;
    metaKeywords?: pulumi.Input<{[key: string]: any}>;
    metaTitle?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<{[key: string]: any}>;
    /**
     * An attribute as base for a custom category order in one level, filled with random value when left empty
     */
    orderHint?: pulumi.Input<string>;
    /**
     * A category that is the parent of this category in the category tree
     */
    parent?: pulumi.Input<string>;
    /**
     * Human readable identifiers, needs to be unique
     */
    slug?: pulumi.Input<{[key: string]: any}>;
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Category resource.
 */
export interface CategoryArgs {
    /**
     * Can be used to store images, icons or movies related to this category
     */
    assets?: pulumi.Input<pulumi.Input<inputs.CategoryAsset>[]>;
    custom?: pulumi.Input<inputs.CategoryCustom>;
    description?: pulumi.Input<{[key: string]: any}>;
    externalId?: pulumi.Input<string>;
    /**
     * Category-specific unique identifier. Must be unique across a project
     */
    key?: pulumi.Input<string>;
    metaDescription?: pulumi.Input<{[key: string]: any}>;
    metaKeywords?: pulumi.Input<{[key: string]: any}>;
    metaTitle?: pulumi.Input<{[key: string]: any}>;
    name?: pulumi.Input<{[key: string]: any}>;
    /**
     * An attribute as base for a custom category order in one level, filled with random value when left empty
     */
    orderHint?: pulumi.Input<string>;
    /**
     * A category that is the parent of this category in the category tree
     */
    parent?: pulumi.Input<string>;
    /**
     * Human readable identifiers, needs to be unique
     */
    slug: pulumi.Input<{[key: string]: any}>;
}
