// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AssociateRole extends pulumi.CustomResource {
    /**
     * Get an existing AssociateRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AssociateRoleState, opts?: pulumi.CustomResourceOptions): AssociateRole {
        return new AssociateRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'commercetools:index/associateRole:AssociateRole';

    /**
     * Returns true if the given object is an instance of AssociateRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AssociateRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssociateRole.__pulumiType;
    }

    /**
     * Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
     * using the general endpoint.
     */
    public readonly buyerAssignable!: pulumi.Output<boolean | undefined>;
    /**
     * User-defined unique identifier of the AssociateRole.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Name of the AssociateRole.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of Permissions for the AssociateRole.
     */
    public readonly permissions!: pulumi.Output<string[]>;
    /**
     * Current version of the AssociateRole.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a AssociateRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AssociateRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AssociateRoleArgs | AssociateRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AssociateRoleState | undefined;
            resourceInputs["buyerAssignable"] = state ? state.buyerAssignable : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as AssociateRoleArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.permissions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissions'");
            }
            resourceInputs["buyerAssignable"] = args ? args.buyerAssignable : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssociateRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AssociateRole resources.
 */
export interface AssociateRoleState {
    /**
     * Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
     * using the general endpoint.
     */
    buyerAssignable?: pulumi.Input<boolean>;
    /**
     * User-defined unique identifier of the AssociateRole.
     */
    key?: pulumi.Input<string>;
    /**
     * Name of the AssociateRole.
     */
    name?: pulumi.Input<string>;
    /**
     * List of Permissions for the AssociateRole.
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Current version of the AssociateRole.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AssociateRole resource.
 */
export interface AssociateRoleArgs {
    /**
     * Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
     * using the general endpoint.
     */
    buyerAssignable?: pulumi.Input<boolean>;
    /**
     * User-defined unique identifier of the AssociateRole.
     */
    key: pulumi.Input<string>;
    /**
     * Name of the AssociateRole.
     */
    name?: pulumi.Input<string>;
    /**
     * List of Permissions for the AssociateRole.
     */
    permissions: pulumi.Input<pulumi.Input<string>[]>;
}
