// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Commercetools.Outputs
{

    [OutputType]
    public sealed class TypeField
    {
        /// <summary>
        /// [TextInputHint](https://docs.commercetools.com/api/projects/types#textinputhint) Provides a visual representation type for this field. It is only relevant for string-based field types like StringType and LocalizedStringType
        /// </summary>
        public readonly string? InputHint;
        /// <summary>
        /// A human-readable label for the field
        /// </summary>
        public readonly ImmutableDictionary<string, object> Label;
        /// <summary>
        /// The name of the field.
        /// The name must be between two and 36 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (_) and the hyphen-minus (-).
        /// The name must be unique for a given resource type ID. In case there is a field with the same name in another type it has to have the same FieldType also
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether the field is required to have a value
        /// </summary>
        public readonly bool? Required;
        /// <summary>
        /// Describes the [type](https://docs.commercetools.com/api/projects/types#fieldtype) of the field
        /// </summary>
        public readonly Outputs.TypeFieldType Type;

        [OutputConstructor]
        private TypeField(
            string? inputHint,

            ImmutableDictionary<string, object> label,

            string name,

            bool? required,

            Outputs.TypeFieldType type)
        {
            InputHint = inputHint;
            Label = label;
            Name = name;
            Required = required;
            Type = type;
        }
    }
}
