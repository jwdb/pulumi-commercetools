// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Commercetools
{
    [CommercetoolsResourceType("commercetools:index/stateTransitions:StateTransitions")]
    public partial class StateTransitions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the state to transition from
        /// </summary>
        [Output("from")]
        public Output<string> From { get; private set; } = null!;

        /// <summary>
        /// Transitions are a way to describe possible transformations of the current state to other states of the same type (for
        /// example: Initial -&gt; Shipped). When performing a transitionState update action and transitions is set, the currently
        /// referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
        /// a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
        /// performing a transitionState update action, any other state of the same type can be transitioned to
        /// </summary>
        [Output("tos")]
        public Output<ImmutableArray<string>> Tos { get; private set; } = null!;


        /// <summary>
        /// Create a StateTransitions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StateTransitions(string name, StateTransitionsArgs args, CustomResourceOptions? options = null)
            : base("commercetools:index/stateTransitions:StateTransitions", name, args ?? new StateTransitionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StateTransitions(string name, Input<string> id, StateTransitionsState? state = null, CustomResourceOptions? options = null)
            : base("commercetools:index/stateTransitions:StateTransitions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StateTransitions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StateTransitions Get(string name, Input<string> id, StateTransitionsState? state = null, CustomResourceOptions? options = null)
        {
            return new StateTransitions(name, id, state, options);
        }
    }

    public sealed class StateTransitionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the state to transition from
        /// </summary>
        [Input("from", required: true)]
        public Input<string> From { get; set; } = null!;

        [Input("tos", required: true)]
        private InputList<string>? _tos;

        /// <summary>
        /// Transitions are a way to describe possible transformations of the current state to other states of the same type (for
        /// example: Initial -&gt; Shipped). When performing a transitionState update action and transitions is set, the currently
        /// referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
        /// a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
        /// performing a transitionState update action, any other state of the same type can be transitioned to
        /// </summary>
        public InputList<string> Tos
        {
            get => _tos ?? (_tos = new InputList<string>());
            set => _tos = value;
        }

        public StateTransitionsArgs()
        {
        }
        public static new StateTransitionsArgs Empty => new StateTransitionsArgs();
    }

    public sealed class StateTransitionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the state to transition from
        /// </summary>
        [Input("from")]
        public Input<string>? From { get; set; }

        [Input("tos")]
        private InputList<string>? _tos;

        /// <summary>
        /// Transitions are a way to describe possible transformations of the current state to other states of the same type (for
        /// example: Initial -&gt; Shipped). When performing a transitionState update action and transitions is set, the currently
        /// referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
        /// a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
        /// performing a transitionState update action, any other state of the same type can be transitioned to
        /// </summary>
        public InputList<string> Tos
        {
            get => _tos ?? (_tos = new InputList<string>());
            set => _tos = value;
        }

        public StateTransitionsState()
        {
        }
        public static new StateTransitionsState Empty => new StateTransitionsState();
    }
}
