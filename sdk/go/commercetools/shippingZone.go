// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ShippingZone struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	// User-specific unique identifier for a zone. Must be unique across a project
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// [Location](https://docs.commercetoolstools.pi/projects/zones#location)
	Locations ShippingZoneLocationArrayOutput `pulumi:"locations"`
	Name      pulumi.StringOutput             `pulumi:"name"`
	Version   pulumi.IntOutput                `pulumi:"version"`
}

// NewShippingZone registers a new resource with the given unique name, arguments, and options.
func NewShippingZone(ctx *pulumi.Context,
	name string, args *ShippingZoneArgs, opts ...pulumi.ResourceOption) (*ShippingZone, error) {
	if args == nil {
		args = &ShippingZoneArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ShippingZone
	err := ctx.RegisterResource("commercetools:index/shippingZone:ShippingZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShippingZone gets an existing ShippingZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShippingZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShippingZoneState, opts ...pulumi.ResourceOption) (*ShippingZone, error) {
	var resource ShippingZone
	err := ctx.ReadResource("commercetools:index/shippingZone:ShippingZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShippingZone resources.
type shippingZoneState struct {
	Description *string `pulumi:"description"`
	// User-specific unique identifier for a zone. Must be unique across a project
	Key *string `pulumi:"key"`
	// [Location](https://docs.commercetoolstools.pi/projects/zones#location)
	Locations []ShippingZoneLocation `pulumi:"locations"`
	Name      *string                `pulumi:"name"`
	Version   *int                   `pulumi:"version"`
}

type ShippingZoneState struct {
	Description pulumi.StringPtrInput
	// User-specific unique identifier for a zone. Must be unique across a project
	Key pulumi.StringPtrInput
	// [Location](https://docs.commercetoolstools.pi/projects/zones#location)
	Locations ShippingZoneLocationArrayInput
	Name      pulumi.StringPtrInput
	Version   pulumi.IntPtrInput
}

func (ShippingZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*shippingZoneState)(nil)).Elem()
}

type shippingZoneArgs struct {
	Description *string `pulumi:"description"`
	// User-specific unique identifier for a zone. Must be unique across a project
	Key *string `pulumi:"key"`
	// [Location](https://docs.commercetoolstools.pi/projects/zones#location)
	Locations []ShippingZoneLocation `pulumi:"locations"`
	Name      *string                `pulumi:"name"`
}

// The set of arguments for constructing a ShippingZone resource.
type ShippingZoneArgs struct {
	Description pulumi.StringPtrInput
	// User-specific unique identifier for a zone. Must be unique across a project
	Key pulumi.StringPtrInput
	// [Location](https://docs.commercetoolstools.pi/projects/zones#location)
	Locations ShippingZoneLocationArrayInput
	Name      pulumi.StringPtrInput
}

func (ShippingZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shippingZoneArgs)(nil)).Elem()
}

type ShippingZoneInput interface {
	pulumi.Input

	ToShippingZoneOutput() ShippingZoneOutput
	ToShippingZoneOutputWithContext(ctx context.Context) ShippingZoneOutput
}

func (*ShippingZone) ElementType() reflect.Type {
	return reflect.TypeOf((**ShippingZone)(nil)).Elem()
}

func (i *ShippingZone) ToShippingZoneOutput() ShippingZoneOutput {
	return i.ToShippingZoneOutputWithContext(context.Background())
}

func (i *ShippingZone) ToShippingZoneOutputWithContext(ctx context.Context) ShippingZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShippingZoneOutput)
}

// ShippingZoneArrayInput is an input type that accepts ShippingZoneArray and ShippingZoneArrayOutput values.
// You can construct a concrete instance of `ShippingZoneArrayInput` via:
//
//	ShippingZoneArray{ ShippingZoneArgs{...} }
type ShippingZoneArrayInput interface {
	pulumi.Input

	ToShippingZoneArrayOutput() ShippingZoneArrayOutput
	ToShippingZoneArrayOutputWithContext(context.Context) ShippingZoneArrayOutput
}

type ShippingZoneArray []ShippingZoneInput

func (ShippingZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShippingZone)(nil)).Elem()
}

func (i ShippingZoneArray) ToShippingZoneArrayOutput() ShippingZoneArrayOutput {
	return i.ToShippingZoneArrayOutputWithContext(context.Background())
}

func (i ShippingZoneArray) ToShippingZoneArrayOutputWithContext(ctx context.Context) ShippingZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShippingZoneArrayOutput)
}

// ShippingZoneMapInput is an input type that accepts ShippingZoneMap and ShippingZoneMapOutput values.
// You can construct a concrete instance of `ShippingZoneMapInput` via:
//
//	ShippingZoneMap{ "key": ShippingZoneArgs{...} }
type ShippingZoneMapInput interface {
	pulumi.Input

	ToShippingZoneMapOutput() ShippingZoneMapOutput
	ToShippingZoneMapOutputWithContext(context.Context) ShippingZoneMapOutput
}

type ShippingZoneMap map[string]ShippingZoneInput

func (ShippingZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShippingZone)(nil)).Elem()
}

func (i ShippingZoneMap) ToShippingZoneMapOutput() ShippingZoneMapOutput {
	return i.ToShippingZoneMapOutputWithContext(context.Background())
}

func (i ShippingZoneMap) ToShippingZoneMapOutputWithContext(ctx context.Context) ShippingZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShippingZoneMapOutput)
}

type ShippingZoneOutput struct{ *pulumi.OutputState }

func (ShippingZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShippingZone)(nil)).Elem()
}

func (o ShippingZoneOutput) ToShippingZoneOutput() ShippingZoneOutput {
	return o
}

func (o ShippingZoneOutput) ToShippingZoneOutputWithContext(ctx context.Context) ShippingZoneOutput {
	return o
}

func (o ShippingZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShippingZone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// User-specific unique identifier for a zone. Must be unique across a project
func (o ShippingZoneOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShippingZone) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// [Location](https://docs.commercetoolstools.pi/projects/zones#location)
func (o ShippingZoneOutput) Locations() ShippingZoneLocationArrayOutput {
	return o.ApplyT(func(v *ShippingZone) ShippingZoneLocationArrayOutput { return v.Locations }).(ShippingZoneLocationArrayOutput)
}

func (o ShippingZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ShippingZone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ShippingZoneOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ShippingZone) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ShippingZoneArrayOutput struct{ *pulumi.OutputState }

func (ShippingZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShippingZone)(nil)).Elem()
}

func (o ShippingZoneArrayOutput) ToShippingZoneArrayOutput() ShippingZoneArrayOutput {
	return o
}

func (o ShippingZoneArrayOutput) ToShippingZoneArrayOutputWithContext(ctx context.Context) ShippingZoneArrayOutput {
	return o
}

func (o ShippingZoneArrayOutput) Index(i pulumi.IntInput) ShippingZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShippingZone {
		return vs[0].([]*ShippingZone)[vs[1].(int)]
	}).(ShippingZoneOutput)
}

type ShippingZoneMapOutput struct{ *pulumi.OutputState }

func (ShippingZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShippingZone)(nil)).Elem()
}

func (o ShippingZoneMapOutput) ToShippingZoneMapOutput() ShippingZoneMapOutput {
	return o
}

func (o ShippingZoneMapOutput) ToShippingZoneMapOutputWithContext(ctx context.Context) ShippingZoneMapOutput {
	return o
}

func (o ShippingZoneMapOutput) MapIndex(k pulumi.StringInput) ShippingZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShippingZone {
		return vs[0].(map[string]*ShippingZone)[vs[1].(string)]
	}).(ShippingZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShippingZoneInput)(nil)).Elem(), &ShippingZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShippingZoneArrayInput)(nil)).Elem(), ShippingZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShippingZoneMapInput)(nil)).Elem(), ShippingZoneMap{})
	pulumi.RegisterOutputType(ShippingZoneOutput{})
	pulumi.RegisterOutputType(ShippingZoneArrayOutput{})
	pulumi.RegisterOutputType(ShippingZoneMapOutput{})
}
