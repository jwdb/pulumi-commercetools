// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ShippingMethod struct {
	pulumi.CustomResourceState

	Custom      ShippingMethodCustomPtrOutput `pulumi:"custom"`
	Description pulumi.StringPtrOutput        `pulumi:"description"`
	// One shipping method in a project can be default
	IsDefault pulumi.BoolPtrOutput `pulumi:"isDefault"`
	// User-specific unique identifier for the shipping method
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedDescription pulumi.MapOutput `pulumi:"localizedDescription"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedName pulumi.MapOutput    `pulumi:"localizedName"`
	Name          pulumi.StringOutput `pulumi:"name"`
	// A Cart predicate which can be used to more precisely select a shipping method for a cart
	Predicate pulumi.StringPtrOutput `pulumi:"predicate"`
	// ID of a [Tax Category](https://docs.commercetools.com/api/projects/taxCategories#taxcategory)
	TaxCategoryId pulumi.StringOutput `pulumi:"taxCategoryId"`
	Version       pulumi.IntOutput    `pulumi:"version"`
}

// NewShippingMethod registers a new resource with the given unique name, arguments, and options.
func NewShippingMethod(ctx *pulumi.Context,
	name string, args *ShippingMethodArgs, opts ...pulumi.ResourceOption) (*ShippingMethod, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaxCategoryId == nil {
		return nil, errors.New("invalid value for required argument 'TaxCategoryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ShippingMethod
	err := ctx.RegisterResource("commercetools:index/shippingMethod:ShippingMethod", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShippingMethod gets an existing ShippingMethod resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShippingMethod(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShippingMethodState, opts ...pulumi.ResourceOption) (*ShippingMethod, error) {
	var resource ShippingMethod
	err := ctx.ReadResource("commercetools:index/shippingMethod:ShippingMethod", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShippingMethod resources.
type shippingMethodState struct {
	Custom      *ShippingMethodCustom `pulumi:"custom"`
	Description *string               `pulumi:"description"`
	// One shipping method in a project can be default
	IsDefault *bool `pulumi:"isDefault"`
	// User-specific unique identifier for the shipping method
	Key *string `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedDescription map[string]interface{} `pulumi:"localizedDescription"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedName map[string]interface{} `pulumi:"localizedName"`
	Name          *string                `pulumi:"name"`
	// A Cart predicate which can be used to more precisely select a shipping method for a cart
	Predicate *string `pulumi:"predicate"`
	// ID of a [Tax Category](https://docs.commercetools.com/api/projects/taxCategories#taxcategory)
	TaxCategoryId *string `pulumi:"taxCategoryId"`
	Version       *int    `pulumi:"version"`
}

type ShippingMethodState struct {
	Custom      ShippingMethodCustomPtrInput
	Description pulumi.StringPtrInput
	// One shipping method in a project can be default
	IsDefault pulumi.BoolPtrInput
	// User-specific unique identifier for the shipping method
	Key pulumi.StringPtrInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedDescription pulumi.MapInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedName pulumi.MapInput
	Name          pulumi.StringPtrInput
	// A Cart predicate which can be used to more precisely select a shipping method for a cart
	Predicate pulumi.StringPtrInput
	// ID of a [Tax Category](https://docs.commercetools.com/api/projects/taxCategories#taxcategory)
	TaxCategoryId pulumi.StringPtrInput
	Version       pulumi.IntPtrInput
}

func (ShippingMethodState) ElementType() reflect.Type {
	return reflect.TypeOf((*shippingMethodState)(nil)).Elem()
}

type shippingMethodArgs struct {
	Custom      *ShippingMethodCustom `pulumi:"custom"`
	Description *string               `pulumi:"description"`
	// One shipping method in a project can be default
	IsDefault *bool `pulumi:"isDefault"`
	// User-specific unique identifier for the shipping method
	Key *string `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedDescription map[string]interface{} `pulumi:"localizedDescription"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedName map[string]interface{} `pulumi:"localizedName"`
	Name          *string                `pulumi:"name"`
	// A Cart predicate which can be used to more precisely select a shipping method for a cart
	Predicate *string `pulumi:"predicate"`
	// ID of a [Tax Category](https://docs.commercetools.com/api/projects/taxCategories#taxcategory)
	TaxCategoryId string `pulumi:"taxCategoryId"`
}

// The set of arguments for constructing a ShippingMethod resource.
type ShippingMethodArgs struct {
	Custom      ShippingMethodCustomPtrInput
	Description pulumi.StringPtrInput
	// One shipping method in a project can be default
	IsDefault pulumi.BoolPtrInput
	// User-specific unique identifier for the shipping method
	Key pulumi.StringPtrInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedDescription pulumi.MapInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	LocalizedName pulumi.MapInput
	Name          pulumi.StringPtrInput
	// A Cart predicate which can be used to more precisely select a shipping method for a cart
	Predicate pulumi.StringPtrInput
	// ID of a [Tax Category](https://docs.commercetools.com/api/projects/taxCategories#taxcategory)
	TaxCategoryId pulumi.StringInput
}

func (ShippingMethodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shippingMethodArgs)(nil)).Elem()
}

type ShippingMethodInput interface {
	pulumi.Input

	ToShippingMethodOutput() ShippingMethodOutput
	ToShippingMethodOutputWithContext(ctx context.Context) ShippingMethodOutput
}

func (*ShippingMethod) ElementType() reflect.Type {
	return reflect.TypeOf((**ShippingMethod)(nil)).Elem()
}

func (i *ShippingMethod) ToShippingMethodOutput() ShippingMethodOutput {
	return i.ToShippingMethodOutputWithContext(context.Background())
}

func (i *ShippingMethod) ToShippingMethodOutputWithContext(ctx context.Context) ShippingMethodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShippingMethodOutput)
}

// ShippingMethodArrayInput is an input type that accepts ShippingMethodArray and ShippingMethodArrayOutput values.
// You can construct a concrete instance of `ShippingMethodArrayInput` via:
//
//	ShippingMethodArray{ ShippingMethodArgs{...} }
type ShippingMethodArrayInput interface {
	pulumi.Input

	ToShippingMethodArrayOutput() ShippingMethodArrayOutput
	ToShippingMethodArrayOutputWithContext(context.Context) ShippingMethodArrayOutput
}

type ShippingMethodArray []ShippingMethodInput

func (ShippingMethodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShippingMethod)(nil)).Elem()
}

func (i ShippingMethodArray) ToShippingMethodArrayOutput() ShippingMethodArrayOutput {
	return i.ToShippingMethodArrayOutputWithContext(context.Background())
}

func (i ShippingMethodArray) ToShippingMethodArrayOutputWithContext(ctx context.Context) ShippingMethodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShippingMethodArrayOutput)
}

// ShippingMethodMapInput is an input type that accepts ShippingMethodMap and ShippingMethodMapOutput values.
// You can construct a concrete instance of `ShippingMethodMapInput` via:
//
//	ShippingMethodMap{ "key": ShippingMethodArgs{...} }
type ShippingMethodMapInput interface {
	pulumi.Input

	ToShippingMethodMapOutput() ShippingMethodMapOutput
	ToShippingMethodMapOutputWithContext(context.Context) ShippingMethodMapOutput
}

type ShippingMethodMap map[string]ShippingMethodInput

func (ShippingMethodMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShippingMethod)(nil)).Elem()
}

func (i ShippingMethodMap) ToShippingMethodMapOutput() ShippingMethodMapOutput {
	return i.ToShippingMethodMapOutputWithContext(context.Background())
}

func (i ShippingMethodMap) ToShippingMethodMapOutputWithContext(ctx context.Context) ShippingMethodMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShippingMethodMapOutput)
}

type ShippingMethodOutput struct{ *pulumi.OutputState }

func (ShippingMethodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShippingMethod)(nil)).Elem()
}

func (o ShippingMethodOutput) ToShippingMethodOutput() ShippingMethodOutput {
	return o
}

func (o ShippingMethodOutput) ToShippingMethodOutputWithContext(ctx context.Context) ShippingMethodOutput {
	return o
}

func (o ShippingMethodOutput) Custom() ShippingMethodCustomPtrOutput {
	return o.ApplyT(func(v *ShippingMethod) ShippingMethodCustomPtrOutput { return v.Custom }).(ShippingMethodCustomPtrOutput)
}

func (o ShippingMethodOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// One shipping method in a project can be default
func (o ShippingMethodOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.BoolPtrOutput { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

// User-specific unique identifier for the shipping method
func (o ShippingMethodOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
func (o ShippingMethodOutput) LocalizedDescription() pulumi.MapOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.MapOutput { return v.LocalizedDescription }).(pulumi.MapOutput)
}

// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
func (o ShippingMethodOutput) LocalizedName() pulumi.MapOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.MapOutput { return v.LocalizedName }).(pulumi.MapOutput)
}

func (o ShippingMethodOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A Cart predicate which can be used to more precisely select a shipping method for a cart
func (o ShippingMethodOutput) Predicate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.StringPtrOutput { return v.Predicate }).(pulumi.StringPtrOutput)
}

// ID of a [Tax Category](https://docs.commercetools.com/api/projects/taxCategories#taxcategory)
func (o ShippingMethodOutput) TaxCategoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.StringOutput { return v.TaxCategoryId }).(pulumi.StringOutput)
}

func (o ShippingMethodOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ShippingMethod) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ShippingMethodArrayOutput struct{ *pulumi.OutputState }

func (ShippingMethodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShippingMethod)(nil)).Elem()
}

func (o ShippingMethodArrayOutput) ToShippingMethodArrayOutput() ShippingMethodArrayOutput {
	return o
}

func (o ShippingMethodArrayOutput) ToShippingMethodArrayOutputWithContext(ctx context.Context) ShippingMethodArrayOutput {
	return o
}

func (o ShippingMethodArrayOutput) Index(i pulumi.IntInput) ShippingMethodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShippingMethod {
		return vs[0].([]*ShippingMethod)[vs[1].(int)]
	}).(ShippingMethodOutput)
}

type ShippingMethodMapOutput struct{ *pulumi.OutputState }

func (ShippingMethodMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShippingMethod)(nil)).Elem()
}

func (o ShippingMethodMapOutput) ToShippingMethodMapOutput() ShippingMethodMapOutput {
	return o
}

func (o ShippingMethodMapOutput) ToShippingMethodMapOutputWithContext(ctx context.Context) ShippingMethodMapOutput {
	return o
}

func (o ShippingMethodMapOutput) MapIndex(k pulumi.StringInput) ShippingMethodOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShippingMethod {
		return vs[0].(map[string]*ShippingMethod)[vs[1].(string)]
	}).(ShippingMethodOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShippingMethodInput)(nil)).Elem(), &ShippingMethod{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShippingMethodArrayInput)(nil)).Elem(), ShippingMethodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShippingMethodMapInput)(nil)).Elem(), ShippingMethodMap{})
	pulumi.RegisterOutputType(ShippingMethodOutput{})
	pulumi.RegisterOutputType(ShippingMethodArrayOutput{})
	pulumi.RegisterOutputType(ShippingMethodMapOutput{})
}
