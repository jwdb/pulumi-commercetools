// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type State struct {
	pulumi.CustomResourceState

	// Description of the State as localized string.
	Description pulumi.StringMapOutput `pulumi:"description"`
	// A state can be declared as an initial state for any state machine. When a workflow starts, this first state must be an
	// initial state
	Initial pulumi.BoolOutput `pulumi:"initial"`
	// Timestamp of the last Terraform update of the order.
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Name of the State as localized string.
	Name pulumi.StringMapOutput `pulumi:"name"`
	// [State Role](https://docs.commercetools.com/api/projects/states#staterole)
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// [StateType](https://docs.commercetools.com/api/projects/states#statetype)
	Type    pulumi.StringOutput `pulumi:"type"`
	Version pulumi.IntOutput    `pulumi:"version"`
}

// NewState registers a new resource with the given unique name, arguments, and options.
func NewState(ctx *pulumi.Context,
	name string, args *StateArgs, opts ...pulumi.ResourceOption) (*State, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource State
	err := ctx.RegisterResource("commercetools:index/state:State", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetState gets an existing State resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetState(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StateState, opts ...pulumi.ResourceOption) (*State, error) {
	var resource State
	err := ctx.ReadResource("commercetools:index/state:State", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering State resources.
type stateState struct {
	// Description of the State as localized string.
	Description map[string]string `pulumi:"description"`
	// A state can be declared as an initial state for any state machine. When a workflow starts, this first state must be an
	// initial state
	Initial *bool `pulumi:"initial"`
	// Timestamp of the last Terraform update of the order.
	Key *string `pulumi:"key"`
	// Name of the State as localized string.
	Name map[string]string `pulumi:"name"`
	// [State Role](https://docs.commercetools.com/api/projects/states#staterole)
	Roles []string `pulumi:"roles"`
	// [StateType](https://docs.commercetools.com/api/projects/states#statetype)
	Type    *string `pulumi:"type"`
	Version *int    `pulumi:"version"`
}

type StateState struct {
	// Description of the State as localized string.
	Description pulumi.StringMapInput
	// A state can be declared as an initial state for any state machine. When a workflow starts, this first state must be an
	// initial state
	Initial pulumi.BoolPtrInput
	// Timestamp of the last Terraform update of the order.
	Key pulumi.StringPtrInput
	// Name of the State as localized string.
	Name pulumi.StringMapInput
	// [State Role](https://docs.commercetools.com/api/projects/states#staterole)
	Roles pulumi.StringArrayInput
	// [StateType](https://docs.commercetools.com/api/projects/states#statetype)
	Type    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (StateState) ElementType() reflect.Type {
	return reflect.TypeOf((*stateState)(nil)).Elem()
}

type stateArgs struct {
	// Description of the State as localized string.
	Description map[string]string `pulumi:"description"`
	// A state can be declared as an initial state for any state machine. When a workflow starts, this first state must be an
	// initial state
	Initial *bool `pulumi:"initial"`
	// Timestamp of the last Terraform update of the order.
	Key *string `pulumi:"key"`
	// Name of the State as localized string.
	Name map[string]string `pulumi:"name"`
	// [State Role](https://docs.commercetools.com/api/projects/states#staterole)
	Roles []string `pulumi:"roles"`
	// [StateType](https://docs.commercetools.com/api/projects/states#statetype)
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a State resource.
type StateArgs struct {
	// Description of the State as localized string.
	Description pulumi.StringMapInput
	// A state can be declared as an initial state for any state machine. When a workflow starts, this first state must be an
	// initial state
	Initial pulumi.BoolPtrInput
	// Timestamp of the last Terraform update of the order.
	Key pulumi.StringPtrInput
	// Name of the State as localized string.
	Name pulumi.StringMapInput
	// [State Role](https://docs.commercetools.com/api/projects/states#staterole)
	Roles pulumi.StringArrayInput
	// [StateType](https://docs.commercetools.com/api/projects/states#statetype)
	Type pulumi.StringInput
}

func (StateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stateArgs)(nil)).Elem()
}

type StateInput interface {
	pulumi.Input

	ToStateOutput() StateOutput
	ToStateOutputWithContext(ctx context.Context) StateOutput
}

func (*State) ElementType() reflect.Type {
	return reflect.TypeOf((**State)(nil)).Elem()
}

func (i *State) ToStateOutput() StateOutput {
	return i.ToStateOutputWithContext(context.Background())
}

func (i *State) ToStateOutputWithContext(ctx context.Context) StateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateOutput)
}

// StateArrayInput is an input type that accepts StateArray and StateArrayOutput values.
// You can construct a concrete instance of `StateArrayInput` via:
//
//	StateArray{ StateArgs{...} }
type StateArrayInput interface {
	pulumi.Input

	ToStateArrayOutput() StateArrayOutput
	ToStateArrayOutputWithContext(context.Context) StateArrayOutput
}

type StateArray []StateInput

func (StateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*State)(nil)).Elem()
}

func (i StateArray) ToStateArrayOutput() StateArrayOutput {
	return i.ToStateArrayOutputWithContext(context.Background())
}

func (i StateArray) ToStateArrayOutputWithContext(ctx context.Context) StateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateArrayOutput)
}

// StateMapInput is an input type that accepts StateMap and StateMapOutput values.
// You can construct a concrete instance of `StateMapInput` via:
//
//	StateMap{ "key": StateArgs{...} }
type StateMapInput interface {
	pulumi.Input

	ToStateMapOutput() StateMapOutput
	ToStateMapOutputWithContext(context.Context) StateMapOutput
}

type StateMap map[string]StateInput

func (StateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*State)(nil)).Elem()
}

func (i StateMap) ToStateMapOutput() StateMapOutput {
	return i.ToStateMapOutputWithContext(context.Background())
}

func (i StateMap) ToStateMapOutputWithContext(ctx context.Context) StateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateMapOutput)
}

type StateOutput struct{ *pulumi.OutputState }

func (StateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**State)(nil)).Elem()
}

func (o StateOutput) ToStateOutput() StateOutput {
	return o
}

func (o StateOutput) ToStateOutputWithContext(ctx context.Context) StateOutput {
	return o
}

// Description of the State as localized string.
func (o StateOutput) Description() pulumi.StringMapOutput {
	return o.ApplyT(func(v *State) pulumi.StringMapOutput { return v.Description }).(pulumi.StringMapOutput)
}

// A state can be declared as an initial state for any state machine. When a workflow starts, this first state must be an
// initial state
func (o StateOutput) Initial() pulumi.BoolOutput {
	return o.ApplyT(func(v *State) pulumi.BoolOutput { return v.Initial }).(pulumi.BoolOutput)
}

// Timestamp of the last Terraform update of the order.
func (o StateOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *State) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the State as localized string.
func (o StateOutput) Name() pulumi.StringMapOutput {
	return o.ApplyT(func(v *State) pulumi.StringMapOutput { return v.Name }).(pulumi.StringMapOutput)
}

// [State Role](https://docs.commercetools.com/api/projects/states#staterole)
func (o StateOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *State) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// [StateType](https://docs.commercetools.com/api/projects/states#statetype)
func (o StateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *State) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o StateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *State) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type StateArrayOutput struct{ *pulumi.OutputState }

func (StateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*State)(nil)).Elem()
}

func (o StateArrayOutput) ToStateArrayOutput() StateArrayOutput {
	return o
}

func (o StateArrayOutput) ToStateArrayOutputWithContext(ctx context.Context) StateArrayOutput {
	return o
}

func (o StateArrayOutput) Index(i pulumi.IntInput) StateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *State {
		return vs[0].([]*State)[vs[1].(int)]
	}).(StateOutput)
}

type StateMapOutput struct{ *pulumi.OutputState }

func (StateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*State)(nil)).Elem()
}

func (o StateMapOutput) ToStateMapOutput() StateMapOutput {
	return o
}

func (o StateMapOutput) ToStateMapOutputWithContext(ctx context.Context) StateMapOutput {
	return o
}

func (o StateMapOutput) MapIndex(k pulumi.StringInput) StateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *State {
		return vs[0].(map[string]*State)[vs[1].(string)]
	}).(StateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StateInput)(nil)).Elem(), &State{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateArrayInput)(nil)).Elem(), StateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateMapInput)(nil)).Elem(), StateMap{})
	pulumi.RegisterOutputType(StateOutput{})
	pulumi.RegisterOutputType(StateArrayOutput{})
	pulumi.RegisterOutputType(StateMapOutput{})
}
