// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Type struct {
	pulumi.CustomResourceState

	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description pulumi.MapOutput `pulumi:"description"`
	// [Field definition](https://docs.commercetools.com/api/projects/types#fielddefinition)
	Fields TypeFieldArrayOutput `pulumi:"fields"`
	// Identifier for the type (max. 256 characters)
	Key pulumi.StringOutput `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name pulumi.MapOutput `pulumi:"name"`
	// Defines for which [resources](https://docs.commercetools.com/api/projects/custom-fields#customizable-resources) the type
	// is valid
	ResourceTypeIds pulumi.StringArrayOutput `pulumi:"resourceTypeIds"`
	Version         pulumi.IntOutput         `pulumi:"version"`
}

// NewType registers a new resource with the given unique name, arguments, and options.
func NewType(ctx *pulumi.Context,
	name string, args *TypeArgs, opts ...pulumi.ResourceOption) (*Type, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.ResourceTypeIds == nil {
		return nil, errors.New("invalid value for required argument 'ResourceTypeIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Type
	err := ctx.RegisterResource("commercetools:index/type:Type", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetType gets an existing Type resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TypeState, opts ...pulumi.ResourceOption) (*Type, error) {
	var resource Type
	err := ctx.ReadResource("commercetools:index/type:Type", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Type resources.
type typeState struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description map[string]interface{} `pulumi:"description"`
	// [Field definition](https://docs.commercetools.com/api/projects/types#fielddefinition)
	Fields []TypeField `pulumi:"fields"`
	// Identifier for the type (max. 256 characters)
	Key *string `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name map[string]interface{} `pulumi:"name"`
	// Defines for which [resources](https://docs.commercetools.com/api/projects/custom-fields#customizable-resources) the type
	// is valid
	ResourceTypeIds []string `pulumi:"resourceTypeIds"`
	Version         *int     `pulumi:"version"`
}

type TypeState struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description pulumi.MapInput
	// [Field definition](https://docs.commercetools.com/api/projects/types#fielddefinition)
	Fields TypeFieldArrayInput
	// Identifier for the type (max. 256 characters)
	Key pulumi.StringPtrInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name pulumi.MapInput
	// Defines for which [resources](https://docs.commercetools.com/api/projects/custom-fields#customizable-resources) the type
	// is valid
	ResourceTypeIds pulumi.StringArrayInput
	Version         pulumi.IntPtrInput
}

func (TypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*typeState)(nil)).Elem()
}

type typeArgs struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description map[string]interface{} `pulumi:"description"`
	// [Field definition](https://docs.commercetools.com/api/projects/types#fielddefinition)
	Fields []TypeField `pulumi:"fields"`
	// Identifier for the type (max. 256 characters)
	Key string `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name map[string]interface{} `pulumi:"name"`
	// Defines for which [resources](https://docs.commercetools.com/api/projects/custom-fields#customizable-resources) the type
	// is valid
	ResourceTypeIds []string `pulumi:"resourceTypeIds"`
}

// The set of arguments for constructing a Type resource.
type TypeArgs struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description pulumi.MapInput
	// [Field definition](https://docs.commercetools.com/api/projects/types#fielddefinition)
	Fields TypeFieldArrayInput
	// Identifier for the type (max. 256 characters)
	Key pulumi.StringInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name pulumi.MapInput
	// Defines for which [resources](https://docs.commercetools.com/api/projects/custom-fields#customizable-resources) the type
	// is valid
	ResourceTypeIds pulumi.StringArrayInput
}

func (TypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*typeArgs)(nil)).Elem()
}

type TypeInput interface {
	pulumi.Input

	ToTypeOutput() TypeOutput
	ToTypeOutputWithContext(ctx context.Context) TypeOutput
}

func (*Type) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (i *Type) ToTypeOutput() TypeOutput {
	return i.ToTypeOutputWithContext(context.Background())
}

func (i *Type) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeOutput)
}

// TypeArrayInput is an input type that accepts TypeArray and TypeArrayOutput values.
// You can construct a concrete instance of `TypeArrayInput` via:
//
//	TypeArray{ TypeArgs{...} }
type TypeArrayInput interface {
	pulumi.Input

	ToTypeArrayOutput() TypeArrayOutput
	ToTypeArrayOutputWithContext(context.Context) TypeArrayOutput
}

type TypeArray []TypeInput

func (TypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Type)(nil)).Elem()
}

func (i TypeArray) ToTypeArrayOutput() TypeArrayOutput {
	return i.ToTypeArrayOutputWithContext(context.Background())
}

func (i TypeArray) ToTypeArrayOutputWithContext(ctx context.Context) TypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeArrayOutput)
}

// TypeMapInput is an input type that accepts TypeMap and TypeMapOutput values.
// You can construct a concrete instance of `TypeMapInput` via:
//
//	TypeMap{ "key": TypeArgs{...} }
type TypeMapInput interface {
	pulumi.Input

	ToTypeMapOutput() TypeMapOutput
	ToTypeMapOutputWithContext(context.Context) TypeMapOutput
}

type TypeMap map[string]TypeInput

func (TypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Type)(nil)).Elem()
}

func (i TypeMap) ToTypeMapOutput() TypeMapOutput {
	return i.ToTypeMapOutputWithContext(context.Background())
}

func (i TypeMap) ToTypeMapOutputWithContext(ctx context.Context) TypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TypeMapOutput)
}

type TypeOutput struct{ *pulumi.OutputState }

func (TypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Type)(nil)).Elem()
}

func (o TypeOutput) ToTypeOutput() TypeOutput {
	return o
}

func (o TypeOutput) ToTypeOutputWithContext(ctx context.Context) TypeOutput {
	return o
}

// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
func (o TypeOutput) Description() pulumi.MapOutput {
	return o.ApplyT(func(v *Type) pulumi.MapOutput { return v.Description }).(pulumi.MapOutput)
}

// [Field definition](https://docs.commercetools.com/api/projects/types#fielddefinition)
func (o TypeOutput) Fields() TypeFieldArrayOutput {
	return o.ApplyT(func(v *Type) TypeFieldArrayOutput { return v.Fields }).(TypeFieldArrayOutput)
}

// Identifier for the type (max. 256 characters)
func (o TypeOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *Type) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
func (o TypeOutput) Name() pulumi.MapOutput {
	return o.ApplyT(func(v *Type) pulumi.MapOutput { return v.Name }).(pulumi.MapOutput)
}

// Defines for which [resources](https://docs.commercetools.com/api/projects/custom-fields#customizable-resources) the type
// is valid
func (o TypeOutput) ResourceTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Type) pulumi.StringArrayOutput { return v.ResourceTypeIds }).(pulumi.StringArrayOutput)
}

func (o TypeOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Type) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TypeArrayOutput struct{ *pulumi.OutputState }

func (TypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Type)(nil)).Elem()
}

func (o TypeArrayOutput) ToTypeArrayOutput() TypeArrayOutput {
	return o
}

func (o TypeArrayOutput) ToTypeArrayOutputWithContext(ctx context.Context) TypeArrayOutput {
	return o
}

func (o TypeArrayOutput) Index(i pulumi.IntInput) TypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Type {
		return vs[0].([]*Type)[vs[1].(int)]
	}).(TypeOutput)
}

type TypeMapOutput struct{ *pulumi.OutputState }

func (TypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Type)(nil)).Elem()
}

func (o TypeMapOutput) ToTypeMapOutput() TypeMapOutput {
	return o
}

func (o TypeMapOutput) ToTypeMapOutputWithContext(ctx context.Context) TypeMapOutput {
	return o
}

func (o TypeMapOutput) MapIndex(k pulumi.StringInput) TypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Type {
		return vs[0].(map[string]*Type)[vs[1].(string)]
	}).(TypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TypeInput)(nil)).Elem(), &Type{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeArrayInput)(nil)).Elem(), TypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TypeMapInput)(nil)).Elem(), TypeMap{})
	pulumi.RegisterOutputType(TypeOutput{})
	pulumi.RegisterOutputType(TypeArrayOutput{})
	pulumi.RegisterOutputType(TypeMapOutput{})
}
