// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProductDiscount struct {
	pulumi.CustomResourceState

	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description pulumi.MapOutput `pulumi:"description"`
	// When set the product discount is applied to products matching the predicate
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// User-defined unique identifier for the ProductDiscount. Must be unique across a project
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name pulumi.MapOutput `pulumi:"name"`
	// A valid [Product Predicate](https://docs.commercetools.com/api/projects/predicates#product-predicates)
	Predicate pulumi.StringOutput `pulumi:"predicate"`
	// The string must contain a number between 0 and 1. All matching product discounts are applied to a product in the order
	// defined by this field. A discount with greater sort order is prioritized higher than a discount with lower sort order.
	// The sort order is unambiguous among all product discounts
	SortOrder  pulumi.StringOutput    `pulumi:"sortOrder"`
	ValidFrom  pulumi.StringPtrOutput `pulumi:"validFrom"`
	ValidUntil pulumi.StringPtrOutput `pulumi:"validUntil"`
	// Defines the effect the discount will have.
	// [ProductDiscountValue](https://docs.commercetools.com/api/projects/productDiscounts#productdiscountvalue)
	Value   ProductDiscountValueOutput `pulumi:"value"`
	Version pulumi.IntOutput           `pulumi:"version"`
}

// NewProductDiscount registers a new resource with the given unique name, arguments, and options.
func NewProductDiscount(ctx *pulumi.Context,
	name string, args *ProductDiscountArgs, opts ...pulumi.ResourceOption) (*ProductDiscount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Predicate == nil {
		return nil, errors.New("invalid value for required argument 'Predicate'")
	}
	if args.SortOrder == nil {
		return nil, errors.New("invalid value for required argument 'SortOrder'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProductDiscount
	err := ctx.RegisterResource("commercetools:index/productDiscount:ProductDiscount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProductDiscount gets an existing ProductDiscount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProductDiscount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProductDiscountState, opts ...pulumi.ResourceOption) (*ProductDiscount, error) {
	var resource ProductDiscount
	err := ctx.ReadResource("commercetools:index/productDiscount:ProductDiscount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProductDiscount resources.
type productDiscountState struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description map[string]interface{} `pulumi:"description"`
	// When set the product discount is applied to products matching the predicate
	IsActive *bool `pulumi:"isActive"`
	// User-defined unique identifier for the ProductDiscount. Must be unique across a project
	Key *string `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name map[string]interface{} `pulumi:"name"`
	// A valid [Product Predicate](https://docs.commercetools.com/api/projects/predicates#product-predicates)
	Predicate *string `pulumi:"predicate"`
	// The string must contain a number between 0 and 1. All matching product discounts are applied to a product in the order
	// defined by this field. A discount with greater sort order is prioritized higher than a discount with lower sort order.
	// The sort order is unambiguous among all product discounts
	SortOrder  *string `pulumi:"sortOrder"`
	ValidFrom  *string `pulumi:"validFrom"`
	ValidUntil *string `pulumi:"validUntil"`
	// Defines the effect the discount will have.
	// [ProductDiscountValue](https://docs.commercetools.com/api/projects/productDiscounts#productdiscountvalue)
	Value   *ProductDiscountValue `pulumi:"value"`
	Version *int                  `pulumi:"version"`
}

type ProductDiscountState struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description pulumi.MapInput
	// When set the product discount is applied to products matching the predicate
	IsActive pulumi.BoolPtrInput
	// User-defined unique identifier for the ProductDiscount. Must be unique across a project
	Key pulumi.StringPtrInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name pulumi.MapInput
	// A valid [Product Predicate](https://docs.commercetools.com/api/projects/predicates#product-predicates)
	Predicate pulumi.StringPtrInput
	// The string must contain a number between 0 and 1. All matching product discounts are applied to a product in the order
	// defined by this field. A discount with greater sort order is prioritized higher than a discount with lower sort order.
	// The sort order is unambiguous among all product discounts
	SortOrder  pulumi.StringPtrInput
	ValidFrom  pulumi.StringPtrInput
	ValidUntil pulumi.StringPtrInput
	// Defines the effect the discount will have.
	// [ProductDiscountValue](https://docs.commercetools.com/api/projects/productDiscounts#productdiscountvalue)
	Value   ProductDiscountValuePtrInput
	Version pulumi.IntPtrInput
}

func (ProductDiscountState) ElementType() reflect.Type {
	return reflect.TypeOf((*productDiscountState)(nil)).Elem()
}

type productDiscountArgs struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description map[string]interface{} `pulumi:"description"`
	// When set the product discount is applied to products matching the predicate
	IsActive *bool `pulumi:"isActive"`
	// User-defined unique identifier for the ProductDiscount. Must be unique across a project
	Key *string `pulumi:"key"`
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name map[string]interface{} `pulumi:"name"`
	// A valid [Product Predicate](https://docs.commercetools.com/api/projects/predicates#product-predicates)
	Predicate string `pulumi:"predicate"`
	// The string must contain a number between 0 and 1. All matching product discounts are applied to a product in the order
	// defined by this field. A discount with greater sort order is prioritized higher than a discount with lower sort order.
	// The sort order is unambiguous among all product discounts
	SortOrder  string  `pulumi:"sortOrder"`
	ValidFrom  *string `pulumi:"validFrom"`
	ValidUntil *string `pulumi:"validUntil"`
	// Defines the effect the discount will have.
	// [ProductDiscountValue](https://docs.commercetools.com/api/projects/productDiscounts#productdiscountvalue)
	Value ProductDiscountValue `pulumi:"value"`
}

// The set of arguments for constructing a ProductDiscount resource.
type ProductDiscountArgs struct {
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Description pulumi.MapInput
	// When set the product discount is applied to products matching the predicate
	IsActive pulumi.BoolPtrInput
	// User-defined unique identifier for the ProductDiscount. Must be unique across a project
	Key pulumi.StringPtrInput
	// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
	Name pulumi.MapInput
	// A valid [Product Predicate](https://docs.commercetools.com/api/projects/predicates#product-predicates)
	Predicate pulumi.StringInput
	// The string must contain a number between 0 and 1. All matching product discounts are applied to a product in the order
	// defined by this field. A discount with greater sort order is prioritized higher than a discount with lower sort order.
	// The sort order is unambiguous among all product discounts
	SortOrder  pulumi.StringInput
	ValidFrom  pulumi.StringPtrInput
	ValidUntil pulumi.StringPtrInput
	// Defines the effect the discount will have.
	// [ProductDiscountValue](https://docs.commercetools.com/api/projects/productDiscounts#productdiscountvalue)
	Value ProductDiscountValueInput
}

func (ProductDiscountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*productDiscountArgs)(nil)).Elem()
}

type ProductDiscountInput interface {
	pulumi.Input

	ToProductDiscountOutput() ProductDiscountOutput
	ToProductDiscountOutputWithContext(ctx context.Context) ProductDiscountOutput
}

func (*ProductDiscount) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductDiscount)(nil)).Elem()
}

func (i *ProductDiscount) ToProductDiscountOutput() ProductDiscountOutput {
	return i.ToProductDiscountOutputWithContext(context.Background())
}

func (i *ProductDiscount) ToProductDiscountOutputWithContext(ctx context.Context) ProductDiscountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductDiscountOutput)
}

// ProductDiscountArrayInput is an input type that accepts ProductDiscountArray and ProductDiscountArrayOutput values.
// You can construct a concrete instance of `ProductDiscountArrayInput` via:
//
//	ProductDiscountArray{ ProductDiscountArgs{...} }
type ProductDiscountArrayInput interface {
	pulumi.Input

	ToProductDiscountArrayOutput() ProductDiscountArrayOutput
	ToProductDiscountArrayOutputWithContext(context.Context) ProductDiscountArrayOutput
}

type ProductDiscountArray []ProductDiscountInput

func (ProductDiscountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductDiscount)(nil)).Elem()
}

func (i ProductDiscountArray) ToProductDiscountArrayOutput() ProductDiscountArrayOutput {
	return i.ToProductDiscountArrayOutputWithContext(context.Background())
}

func (i ProductDiscountArray) ToProductDiscountArrayOutputWithContext(ctx context.Context) ProductDiscountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductDiscountArrayOutput)
}

// ProductDiscountMapInput is an input type that accepts ProductDiscountMap and ProductDiscountMapOutput values.
// You can construct a concrete instance of `ProductDiscountMapInput` via:
//
//	ProductDiscountMap{ "key": ProductDiscountArgs{...} }
type ProductDiscountMapInput interface {
	pulumi.Input

	ToProductDiscountMapOutput() ProductDiscountMapOutput
	ToProductDiscountMapOutputWithContext(context.Context) ProductDiscountMapOutput
}

type ProductDiscountMap map[string]ProductDiscountInput

func (ProductDiscountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductDiscount)(nil)).Elem()
}

func (i ProductDiscountMap) ToProductDiscountMapOutput() ProductDiscountMapOutput {
	return i.ToProductDiscountMapOutputWithContext(context.Background())
}

func (i ProductDiscountMap) ToProductDiscountMapOutputWithContext(ctx context.Context) ProductDiscountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProductDiscountMapOutput)
}

type ProductDiscountOutput struct{ *pulumi.OutputState }

func (ProductDiscountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProductDiscount)(nil)).Elem()
}

func (o ProductDiscountOutput) ToProductDiscountOutput() ProductDiscountOutput {
	return o
}

func (o ProductDiscountOutput) ToProductDiscountOutputWithContext(ctx context.Context) ProductDiscountOutput {
	return o
}

// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
func (o ProductDiscountOutput) Description() pulumi.MapOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.MapOutput { return v.Description }).(pulumi.MapOutput)
}

// When set the product discount is applied to products matching the predicate
func (o ProductDiscountOutput) IsActive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.BoolPtrOutput { return v.IsActive }).(pulumi.BoolPtrOutput)
}

// User-defined unique identifier for the ProductDiscount. Must be unique across a project
func (o ProductDiscountOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// [LocalizedString](https://docs.commercetools.com/api/types#localizedstring)
func (o ProductDiscountOutput) Name() pulumi.MapOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.MapOutput { return v.Name }).(pulumi.MapOutput)
}

// A valid [Product Predicate](https://docs.commercetools.com/api/projects/predicates#product-predicates)
func (o ProductDiscountOutput) Predicate() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.StringOutput { return v.Predicate }).(pulumi.StringOutput)
}

// The string must contain a number between 0 and 1. All matching product discounts are applied to a product in the order
// defined by this field. A discount with greater sort order is prioritized higher than a discount with lower sort order.
// The sort order is unambiguous among all product discounts
func (o ProductDiscountOutput) SortOrder() pulumi.StringOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.StringOutput { return v.SortOrder }).(pulumi.StringOutput)
}

func (o ProductDiscountOutput) ValidFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.StringPtrOutput { return v.ValidFrom }).(pulumi.StringPtrOutput)
}

func (o ProductDiscountOutput) ValidUntil() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.StringPtrOutput { return v.ValidUntil }).(pulumi.StringPtrOutput)
}

// Defines the effect the discount will have.
// [ProductDiscountValue](https://docs.commercetools.com/api/projects/productDiscounts#productdiscountvalue)
func (o ProductDiscountOutput) Value() ProductDiscountValueOutput {
	return o.ApplyT(func(v *ProductDiscount) ProductDiscountValueOutput { return v.Value }).(ProductDiscountValueOutput)
}

func (o ProductDiscountOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ProductDiscount) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ProductDiscountArrayOutput struct{ *pulumi.OutputState }

func (ProductDiscountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProductDiscount)(nil)).Elem()
}

func (o ProductDiscountArrayOutput) ToProductDiscountArrayOutput() ProductDiscountArrayOutput {
	return o
}

func (o ProductDiscountArrayOutput) ToProductDiscountArrayOutputWithContext(ctx context.Context) ProductDiscountArrayOutput {
	return o
}

func (o ProductDiscountArrayOutput) Index(i pulumi.IntInput) ProductDiscountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProductDiscount {
		return vs[0].([]*ProductDiscount)[vs[1].(int)]
	}).(ProductDiscountOutput)
}

type ProductDiscountMapOutput struct{ *pulumi.OutputState }

func (ProductDiscountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProductDiscount)(nil)).Elem()
}

func (o ProductDiscountMapOutput) ToProductDiscountMapOutput() ProductDiscountMapOutput {
	return o
}

func (o ProductDiscountMapOutput) ToProductDiscountMapOutputWithContext(ctx context.Context) ProductDiscountMapOutput {
	return o
}

func (o ProductDiscountMapOutput) MapIndex(k pulumi.StringInput) ProductDiscountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProductDiscount {
		return vs[0].(map[string]*ProductDiscount)[vs[1].(string)]
	}).(ProductDiscountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProductDiscountInput)(nil)).Elem(), &ProductDiscount{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductDiscountArrayInput)(nil)).Elem(), ProductDiscountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProductDiscountMapInput)(nil)).Elem(), ProductDiscountMap{})
	pulumi.RegisterOutputType(ProductDiscountOutput{})
	pulumi.RegisterOutputType(ProductDiscountArrayOutput{})
	pulumi.RegisterOutputType(ProductDiscountMapOutput{})
}
