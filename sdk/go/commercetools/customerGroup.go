// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CustomerGroup struct {
	pulumi.CustomResourceState

	Custom CustomerGroupCustomPtrOutput `pulumi:"custom"`
	// User-specific unique identifier for the customer group
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Unique within the project
	Name    pulumi.StringOutput `pulumi:"name"`
	Version pulumi.IntOutput    `pulumi:"version"`
}

// NewCustomerGroup registers a new resource with the given unique name, arguments, and options.
func NewCustomerGroup(ctx *pulumi.Context,
	name string, args *CustomerGroupArgs, opts ...pulumi.ResourceOption) (*CustomerGroup, error) {
	if args == nil {
		args = &CustomerGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomerGroup
	err := ctx.RegisterResource("commercetools:index/customerGroup:CustomerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomerGroup gets an existing CustomerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomerGroupState, opts ...pulumi.ResourceOption) (*CustomerGroup, error) {
	var resource CustomerGroup
	err := ctx.ReadResource("commercetools:index/customerGroup:CustomerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomerGroup resources.
type customerGroupState struct {
	Custom *CustomerGroupCustom `pulumi:"custom"`
	// User-specific unique identifier for the customer group
	Key *string `pulumi:"key"`
	// Unique within the project
	Name    *string `pulumi:"name"`
	Version *int    `pulumi:"version"`
}

type CustomerGroupState struct {
	Custom CustomerGroupCustomPtrInput
	// User-specific unique identifier for the customer group
	Key pulumi.StringPtrInput
	// Unique within the project
	Name    pulumi.StringPtrInput
	Version pulumi.IntPtrInput
}

func (CustomerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*customerGroupState)(nil)).Elem()
}

type customerGroupArgs struct {
	Custom *CustomerGroupCustom `pulumi:"custom"`
	// User-specific unique identifier for the customer group
	Key *string `pulumi:"key"`
	// Unique within the project
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CustomerGroup resource.
type CustomerGroupArgs struct {
	Custom CustomerGroupCustomPtrInput
	// User-specific unique identifier for the customer group
	Key pulumi.StringPtrInput
	// Unique within the project
	Name pulumi.StringPtrInput
}

func (CustomerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customerGroupArgs)(nil)).Elem()
}

type CustomerGroupInput interface {
	pulumi.Input

	ToCustomerGroupOutput() CustomerGroupOutput
	ToCustomerGroupOutputWithContext(ctx context.Context) CustomerGroupOutput
}

func (*CustomerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerGroup)(nil)).Elem()
}

func (i *CustomerGroup) ToCustomerGroupOutput() CustomerGroupOutput {
	return i.ToCustomerGroupOutputWithContext(context.Background())
}

func (i *CustomerGroup) ToCustomerGroupOutputWithContext(ctx context.Context) CustomerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerGroupOutput)
}

// CustomerGroupArrayInput is an input type that accepts CustomerGroupArray and CustomerGroupArrayOutput values.
// You can construct a concrete instance of `CustomerGroupArrayInput` via:
//
//	CustomerGroupArray{ CustomerGroupArgs{...} }
type CustomerGroupArrayInput interface {
	pulumi.Input

	ToCustomerGroupArrayOutput() CustomerGroupArrayOutput
	ToCustomerGroupArrayOutputWithContext(context.Context) CustomerGroupArrayOutput
}

type CustomerGroupArray []CustomerGroupInput

func (CustomerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomerGroup)(nil)).Elem()
}

func (i CustomerGroupArray) ToCustomerGroupArrayOutput() CustomerGroupArrayOutput {
	return i.ToCustomerGroupArrayOutputWithContext(context.Background())
}

func (i CustomerGroupArray) ToCustomerGroupArrayOutputWithContext(ctx context.Context) CustomerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerGroupArrayOutput)
}

// CustomerGroupMapInput is an input type that accepts CustomerGroupMap and CustomerGroupMapOutput values.
// You can construct a concrete instance of `CustomerGroupMapInput` via:
//
//	CustomerGroupMap{ "key": CustomerGroupArgs{...} }
type CustomerGroupMapInput interface {
	pulumi.Input

	ToCustomerGroupMapOutput() CustomerGroupMapOutput
	ToCustomerGroupMapOutputWithContext(context.Context) CustomerGroupMapOutput
}

type CustomerGroupMap map[string]CustomerGroupInput

func (CustomerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomerGroup)(nil)).Elem()
}

func (i CustomerGroupMap) ToCustomerGroupMapOutput() CustomerGroupMapOutput {
	return i.ToCustomerGroupMapOutputWithContext(context.Background())
}

func (i CustomerGroupMap) ToCustomerGroupMapOutputWithContext(ctx context.Context) CustomerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerGroupMapOutput)
}

type CustomerGroupOutput struct{ *pulumi.OutputState }

func (CustomerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomerGroup)(nil)).Elem()
}

func (o CustomerGroupOutput) ToCustomerGroupOutput() CustomerGroupOutput {
	return o
}

func (o CustomerGroupOutput) ToCustomerGroupOutputWithContext(ctx context.Context) CustomerGroupOutput {
	return o
}

func (o CustomerGroupOutput) Custom() CustomerGroupCustomPtrOutput {
	return o.ApplyT(func(v *CustomerGroup) CustomerGroupCustomPtrOutput { return v.Custom }).(CustomerGroupCustomPtrOutput)
}

// User-specific unique identifier for the customer group
func (o CustomerGroupOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomerGroup) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Unique within the project
func (o CustomerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CustomerGroupOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CustomerGroup) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CustomerGroupArrayOutput struct{ *pulumi.OutputState }

func (CustomerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomerGroup)(nil)).Elem()
}

func (o CustomerGroupArrayOutput) ToCustomerGroupArrayOutput() CustomerGroupArrayOutput {
	return o
}

func (o CustomerGroupArrayOutput) ToCustomerGroupArrayOutputWithContext(ctx context.Context) CustomerGroupArrayOutput {
	return o
}

func (o CustomerGroupArrayOutput) Index(i pulumi.IntInput) CustomerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomerGroup {
		return vs[0].([]*CustomerGroup)[vs[1].(int)]
	}).(CustomerGroupOutput)
}

type CustomerGroupMapOutput struct{ *pulumi.OutputState }

func (CustomerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomerGroup)(nil)).Elem()
}

func (o CustomerGroupMapOutput) ToCustomerGroupMapOutput() CustomerGroupMapOutput {
	return o
}

func (o CustomerGroupMapOutput) ToCustomerGroupMapOutputWithContext(ctx context.Context) CustomerGroupMapOutput {
	return o
}

func (o CustomerGroupMapOutput) MapIndex(k pulumi.StringInput) CustomerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomerGroup {
		return vs[0].(map[string]*CustomerGroup)[vs[1].(string)]
	}).(CustomerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerGroupInput)(nil)).Elem(), &CustomerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerGroupArrayInput)(nil)).Elem(), CustomerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerGroupMapInput)(nil)).Elem(), CustomerGroupMap{})
	pulumi.RegisterOutputType(CustomerGroupOutput{})
	pulumi.RegisterOutputType(CustomerGroupArrayOutput{})
	pulumi.RegisterOutputType(CustomerGroupMapOutput{})
}
