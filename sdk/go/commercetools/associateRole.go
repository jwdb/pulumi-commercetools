// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package commercetools

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-commercetools/sdk/go/commercetools/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AssociateRole struct {
	pulumi.CustomResourceState

	// Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
	// using the general endpoint.
	BuyerAssignable pulumi.BoolPtrOutput `pulumi:"buyerAssignable"`
	// User-defined unique identifier of the AssociateRole.
	Key pulumi.StringOutput `pulumi:"key"`
	// Name of the AssociateRole.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of Permissions for the AssociateRole.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// Current version of the AssociateRole.
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAssociateRole registers a new resource with the given unique name, arguments, and options.
func NewAssociateRole(ctx *pulumi.Context,
	name string, args *AssociateRoleArgs, opts ...pulumi.ResourceOption) (*AssociateRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssociateRole
	err := ctx.RegisterResource("commercetools:index/associateRole:AssociateRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociateRole gets an existing AssociateRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociateRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociateRoleState, opts ...pulumi.ResourceOption) (*AssociateRole, error) {
	var resource AssociateRole
	err := ctx.ReadResource("commercetools:index/associateRole:AssociateRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssociateRole resources.
type associateRoleState struct {
	// Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
	// using the general endpoint.
	BuyerAssignable *bool `pulumi:"buyerAssignable"`
	// User-defined unique identifier of the AssociateRole.
	Key *string `pulumi:"key"`
	// Name of the AssociateRole.
	Name *string `pulumi:"name"`
	// List of Permissions for the AssociateRole.
	Permissions []string `pulumi:"permissions"`
	// Current version of the AssociateRole.
	Version *int `pulumi:"version"`
}

type AssociateRoleState struct {
	// Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
	// using the general endpoint.
	BuyerAssignable pulumi.BoolPtrInput
	// User-defined unique identifier of the AssociateRole.
	Key pulumi.StringPtrInput
	// Name of the AssociateRole.
	Name pulumi.StringPtrInput
	// List of Permissions for the AssociateRole.
	Permissions pulumi.StringArrayInput
	// Current version of the AssociateRole.
	Version pulumi.IntPtrInput
}

func (AssociateRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*associateRoleState)(nil)).Elem()
}

type associateRoleArgs struct {
	// Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
	// using the general endpoint.
	BuyerAssignable *bool `pulumi:"buyerAssignable"`
	// User-defined unique identifier of the AssociateRole.
	Key string `pulumi:"key"`
	// Name of the AssociateRole.
	Name *string `pulumi:"name"`
	// List of Permissions for the AssociateRole.
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a AssociateRole resource.
type AssociateRoleArgs struct {
	// Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
	// using the general endpoint.
	BuyerAssignable pulumi.BoolPtrInput
	// User-defined unique identifier of the AssociateRole.
	Key pulumi.StringInput
	// Name of the AssociateRole.
	Name pulumi.StringPtrInput
	// List of Permissions for the AssociateRole.
	Permissions pulumi.StringArrayInput
}

func (AssociateRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*associateRoleArgs)(nil)).Elem()
}

type AssociateRoleInput interface {
	pulumi.Input

	ToAssociateRoleOutput() AssociateRoleOutput
	ToAssociateRoleOutputWithContext(ctx context.Context) AssociateRoleOutput
}

func (*AssociateRole) ElementType() reflect.Type {
	return reflect.TypeOf((**AssociateRole)(nil)).Elem()
}

func (i *AssociateRole) ToAssociateRoleOutput() AssociateRoleOutput {
	return i.ToAssociateRoleOutputWithContext(context.Background())
}

func (i *AssociateRole) ToAssociateRoleOutputWithContext(ctx context.Context) AssociateRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociateRoleOutput)
}

// AssociateRoleArrayInput is an input type that accepts AssociateRoleArray and AssociateRoleArrayOutput values.
// You can construct a concrete instance of `AssociateRoleArrayInput` via:
//
//	AssociateRoleArray{ AssociateRoleArgs{...} }
type AssociateRoleArrayInput interface {
	pulumi.Input

	ToAssociateRoleArrayOutput() AssociateRoleArrayOutput
	ToAssociateRoleArrayOutputWithContext(context.Context) AssociateRoleArrayOutput
}

type AssociateRoleArray []AssociateRoleInput

func (AssociateRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssociateRole)(nil)).Elem()
}

func (i AssociateRoleArray) ToAssociateRoleArrayOutput() AssociateRoleArrayOutput {
	return i.ToAssociateRoleArrayOutputWithContext(context.Background())
}

func (i AssociateRoleArray) ToAssociateRoleArrayOutputWithContext(ctx context.Context) AssociateRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociateRoleArrayOutput)
}

// AssociateRoleMapInput is an input type that accepts AssociateRoleMap and AssociateRoleMapOutput values.
// You can construct a concrete instance of `AssociateRoleMapInput` via:
//
//	AssociateRoleMap{ "key": AssociateRoleArgs{...} }
type AssociateRoleMapInput interface {
	pulumi.Input

	ToAssociateRoleMapOutput() AssociateRoleMapOutput
	ToAssociateRoleMapOutputWithContext(context.Context) AssociateRoleMapOutput
}

type AssociateRoleMap map[string]AssociateRoleInput

func (AssociateRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssociateRole)(nil)).Elem()
}

func (i AssociateRoleMap) ToAssociateRoleMapOutput() AssociateRoleMapOutput {
	return i.ToAssociateRoleMapOutputWithContext(context.Background())
}

func (i AssociateRoleMap) ToAssociateRoleMapOutputWithContext(ctx context.Context) AssociateRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociateRoleMapOutput)
}

type AssociateRoleOutput struct{ *pulumi.OutputState }

func (AssociateRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssociateRole)(nil)).Elem()
}

func (o AssociateRoleOutput) ToAssociateRoleOutput() AssociateRoleOutput {
	return o
}

func (o AssociateRoleOutput) ToAssociateRoleOutputWithContext(ctx context.Context) AssociateRoleOutput {
	return o
}

// Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
// using the general endpoint.
func (o AssociateRoleOutput) BuyerAssignable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AssociateRole) pulumi.BoolPtrOutput { return v.BuyerAssignable }).(pulumi.BoolPtrOutput)
}

// User-defined unique identifier of the AssociateRole.
func (o AssociateRoleOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *AssociateRole) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Name of the AssociateRole.
func (o AssociateRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssociateRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of Permissions for the AssociateRole.
func (o AssociateRoleOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AssociateRole) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Current version of the AssociateRole.
func (o AssociateRoleOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *AssociateRole) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type AssociateRoleArrayOutput struct{ *pulumi.OutputState }

func (AssociateRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssociateRole)(nil)).Elem()
}

func (o AssociateRoleArrayOutput) ToAssociateRoleArrayOutput() AssociateRoleArrayOutput {
	return o
}

func (o AssociateRoleArrayOutput) ToAssociateRoleArrayOutputWithContext(ctx context.Context) AssociateRoleArrayOutput {
	return o
}

func (o AssociateRoleArrayOutput) Index(i pulumi.IntInput) AssociateRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssociateRole {
		return vs[0].([]*AssociateRole)[vs[1].(int)]
	}).(AssociateRoleOutput)
}

type AssociateRoleMapOutput struct{ *pulumi.OutputState }

func (AssociateRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssociateRole)(nil)).Elem()
}

func (o AssociateRoleMapOutput) ToAssociateRoleMapOutput() AssociateRoleMapOutput {
	return o
}

func (o AssociateRoleMapOutput) ToAssociateRoleMapOutputWithContext(ctx context.Context) AssociateRoleMapOutput {
	return o
}

func (o AssociateRoleMapOutput) MapIndex(k pulumi.StringInput) AssociateRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssociateRole {
		return vs[0].(map[string]*AssociateRole)[vs[1].(string)]
	}).(AssociateRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssociateRoleInput)(nil)).Elem(), &AssociateRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociateRoleArrayInput)(nil)).Elem(), AssociateRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociateRoleMapInput)(nil)).Elem(), AssociateRoleMap{})
	pulumi.RegisterOutputType(AssociateRoleOutput{})
	pulumi.RegisterOutputType(AssociateRoleArrayOutput{})
	pulumi.RegisterOutputType(AssociateRoleMapOutput{})
}
